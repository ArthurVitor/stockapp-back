// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StockApp.API.Context;

#nullable disable

namespace StockApp.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240610164007_Removed perishable from tables")]
    partial class Removedperishablefromtables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StockApp.Models.Models.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EntryNoteId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalValue")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EntryNoteId")
                        .IsUnique();

                    b.HasIndex("InventoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("StockApp.Models.Models.EntryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NoteGenerationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalValue")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("EntryNotes");
                });

            modelBuilder.Entity("StockApp.Models.Models.ExitNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NoteGenerationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ExitNotes");
                });

            modelBuilder.Entity("StockApp.Models.Models.ExitNoteBatch", b =>
                {
                    b.Property<int>("ExitNoteId")
                        .HasColumnType("integer");

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.HasKey("ExitNoteId", "BatchId");

                    b.HasIndex("BatchId");

                    b.ToTable("ExitNoteBatches");
                });

            modelBuilder.Entity("StockApp.Models.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("StockApp.Models.Models.Parameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<double>("MaximumAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("MinimumAmount")
                        .HasColumnType("double precision");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("StockApp.Models.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Perishable")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StockApp.Models.Models.ProductSubCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("ProductSubCategories");
                });

            modelBuilder.Entity("StockApp.Models.Models.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("StockApp.Models.Models.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("StockApp.Models.Models.Batch", b =>
                {
                    b.HasOne("StockApp.Models.Models.EntryNote", "EntryNote")
                        .WithOne("Batch")
                        .HasForeignKey("StockApp.Models.Models.Batch", "EntryNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockApp.Models.Models.Inventory", "Inventory")
                        .WithMany("Batches")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockApp.Models.Models.Product", "Product")
                        .WithMany("Batches")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntryNote");

                    b.Navigation("Inventory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StockApp.Models.Models.EntryNote", b =>
                {
                    b.HasOne("StockApp.Models.Models.Inventory", "Inventory")
                        .WithMany("EntryNotes")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockApp.Models.Models.Product", "Product")
                        .WithMany("EntryNotes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StockApp.Models.Models.ExitNote", b =>
                {
                    b.HasOne("StockApp.Models.Models.Inventory", "Inventory")
                        .WithMany("ExitNotes")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockApp.Models.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StockApp.Models.Models.ExitNoteBatch", b =>
                {
                    b.HasOne("StockApp.Models.Models.Batch", "Batch")
                        .WithMany("ExitNoteBatches")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockApp.Models.Models.ExitNote", "ExitNote")
                        .WithMany("ExitNoteBatches")
                        .HasForeignKey("ExitNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("ExitNote");
                });

            modelBuilder.Entity("StockApp.Models.Models.Parameters", b =>
                {
                    b.HasOne("StockApp.Models.Models.Inventory", "Inventory")
                        .WithMany("Parameters")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("StockApp.Models.Models.ProductSubCategory", b =>
                {
                    b.HasOne("StockApp.Models.Models.Product", "Product")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockApp.Models.Models.SubCategory", "SubCategory")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("StockApp.Models.Models.Transactions", b =>
                {
                    b.HasOne("StockApp.Models.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("StockApp.Models.Models.Batch", b =>
                {
                    b.Navigation("ExitNoteBatches");
                });

            modelBuilder.Entity("StockApp.Models.Models.EntryNote", b =>
                {
                    b.Navigation("Batch")
                        .IsRequired();
                });

            modelBuilder.Entity("StockApp.Models.Models.ExitNote", b =>
                {
                    b.Navigation("ExitNoteBatches");
                });

            modelBuilder.Entity("StockApp.Models.Models.Inventory", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("EntryNotes");

                    b.Navigation("ExitNotes");

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("StockApp.Models.Models.Product", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("EntryNotes");

                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("StockApp.Models.Models.SubCategory", b =>
                {
                    b.Navigation("ProductSubCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
